syntax = "proto3";

option java_package = "fr.unistra.blockchain";
option objc_class_prefix = "Blockchain";

package blockchain;

// Represents an empty message.
// Used in cases when request or response does not require any data to be sent.
message Empty {
}


// Outgoing `ping` message of a ping-pong protocol (see service definition)
message Ping {
    string message = 1;
}

// Incoming `pong` message of a ping-pong protocol (see service definition)
message Pong {
    string message = 1;
}

// Holds information about a single node (peer) in the network.
message Node {
    string host = 1; // IP address of the node
    int32 port = 2; // Port on which the node is listening
    int32 address = 3; // Coin address of the node
}

// Represents an input of a transaction.
// An input of a valid transaction must refer to a specific unspent output
// of one of the previous transactions (pair: hash, idx).
// An exception from this rule is the coinbase transaction of the newly mined
// block, which creates coins by itself and requires no inputs.
message TransactionInput {
    bytes src_hash = 1; // hash of the source transaction
    int32 src_idx = 2; // index of the output in source the source transaction
    bytes signature = 3; // crypto-signature of the owner
}

// Represents an output of a transaction.
// Output of a transaction can be spent by becoming an input of a transaction
// further in the blockchain
message TransactionOutput {
    int32 amount = 1; // amount of coins to transfer
    bytes key = 2; // public key which confirms the ownership
}

// Represents a transaction.
// Transaction is a way to transfer coins between owners.
// It is  defined by a set of inputs and outputs and is reffered to by its hash.
message Transaction {
    int32 version = 1; // protocol version
    uint32 extra_nonce = 2; // extra nonce for coinbase transaction
    repeated TransactionInput inputs = 3; // inputs
    repeated TransactionOutput outputs = 4; // outputs
}

// Block is a single unit of a blockchain.
// Every block contains a set of transactions (including coinbase
// transaction) organised into Merkle tree and refers via a hash pointer to the
// previous block in the blockchain. The blocks are being mined by full nodes.
message Block {
    int32 version = 1; // protocol version
    bytes hash = 2;
    bytes hash_prev = 3; // hash of the previous block in the blockchain
    int32 difficulty = 4; // target difficulty of the puzzle
    uint32 nonce = 5; // nonce that complements original block hash to target hash
    bytes merkle_root = 6; // root of the Merkle tree of transactions
    repeated Transaction transactions = 7; // array of transactions
}

// Describes RPC calls of the blockchain service
service Blockchain {
    // Ping-pong protocol for the connection verification.
    // A node sends a simple random message to another node.
    // That node is supposed to reply with the exact same message.
    // This is a simple verification of the RPC connection status.
    rpc ping (Ping) returns (Pong) {}

    // A node advertises to its peer nodes one or more of the new transactions
    // or transactions it has heard about previously.
    rpc send_transactions (stream Transaction) returns (Empty) {}

    // A node requests another node to send known transactions.
    rpc get_transactions (Empty) returns (stream Transaction) {}

    // A node proposes one or more blocks to its peer nodes
    rpc send_blocks (stream Block) returns (Empty) {}

    // A node requests another node to send known blocks.
    rpc get_blocks (Empty) returns (stream Block) {}

    // A node requests information about peer nodes from another peer
    rpc get_peers (Empty) returns (stream Node) {}

    // A node sends information about peer nodes from another peer
    rpc send_peers (stream Node) returns (Empty) {}
}
